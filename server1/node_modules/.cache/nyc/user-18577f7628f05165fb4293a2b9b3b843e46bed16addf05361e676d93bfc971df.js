function cov_1a1g64j4zd(){var path="C:\\Users\\USER\\Desktop\\andela new\\potofolioUpdate6\\server1\\controllers\\user.js";var hash="e84ed6aabeae8a05dd8fa6aae5a55333e803261f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\USER\\Desktop\\andela new\\potofolioUpdate6\\server1\\controllers\\user.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:38}},"1":{start:{line:4,column:0},end:{line:4,column:27}},"2":{start:{line:5,column:13},end:{line:5,column:32}},"3":{start:{line:6,column:10},end:{line:6,column:33}},"4":{start:{line:9,column:16},end:{line:58,column:3}},"5":{start:{line:12,column:4},end:{line:56,column:5}},"6":{start:{line:14,column:57},end:{line:14,column:65}},"7":{start:{line:17,column:6},end:{line:19,column:7}},"8":{start:{line:18,column:8},end:{line:18,column:54}},"9":{start:{line:23,column:22},end:{line:23,column:51}},"10":{start:{line:25,column:6},end:{line:27,column:7}},"11":{start:{line:26,column:8},end:{line:26,column:72}},"12":{start:{line:31,column:6},end:{line:31,column:58}},"13":{start:{line:34,column:19},end:{line:39,column:8}},"14":{start:{line:42,column:20},end:{line:48,column:7}},"15":{start:{line:50,column:6},end:{line:50,column:25}},"16":{start:{line:53,column:6},end:{line:53,column:33}},"17":{start:{line:55,column:6},end:{line:55,column:23}},"18":{start:{line:66,column:13},end:{line:101,column:3}},"19":{start:{line:69,column:4},end:{line:99,column:5}},"20":{start:{line:71,column:34},end:{line:71,column:42}},"21":{start:{line:74,column:6},end:{line:76,column:7}},"22":{start:{line:75,column:8},end:{line:75,column:54}},"23":{start:{line:78,column:19},end:{line:78,column:48}},"24":{start:{line:80,column:6},end:{line:95,column:7}},"25":{start:{line:82,column:22},end:{line:88,column:9}},"26":{start:{line:91,column:8},end:{line:91,column:27}},"27":{start:{line:94,column:8},end:{line:94,column:35}},"28":{start:{line:96,column:6},end:{line:96,column:50}},"29":{start:{line:98,column:6},end:{line:98,column:23}},"30":{start:{line:104,column:0},end:{line:107,column:1}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:16},end:{line:9,column:17}},loc:{start:{line:9,column:36},end:{line:58,column:3}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:66,column:13},end:{line:66,column:14}},loc:{start:{line:66,column:33},end:{line:101,column:3}},line:66}},branchMap:{"0":{loc:{start:{line:17,column:6},end:{line:19,column:7}},type:"if",locations:[{start:{line:17,column:6},end:{line:19,column:7}},{start:{line:17,column:6},end:{line:19,column:7}}],line:17},"1":{loc:{start:{line:17,column:12},end:{line:17,column:56}},type:"binary-expr",locations:[{start:{line:17,column:12},end:{line:17,column:17}},{start:{line:17,column:21},end:{line:17,column:29}},{start:{line:17,column:33},end:{line:17,column:43}},{start:{line:17,column:47},end:{line:17,column:56}}],line:17},"2":{loc:{start:{line:25,column:6},end:{line:27,column:7}},type:"if",locations:[{start:{line:25,column:6},end:{line:27,column:7}},{start:{line:25,column:6},end:{line:27,column:7}}],line:25},"3":{loc:{start:{line:74,column:6},end:{line:76,column:7}},type:"if",locations:[{start:{line:74,column:6},end:{line:76,column:7}},{start:{line:74,column:6},end:{line:76,column:7}}],line:74},"4":{loc:{start:{line:74,column:12},end:{line:74,column:29}},type:"binary-expr",locations:[{start:{line:74,column:12},end:{line:74,column:17}},{start:{line:74,column:21},end:{line:74,column:29}}],line:74},"5":{loc:{start:{line:80,column:6},end:{line:95,column:7}},type:"if",locations:[{start:{line:80,column:6},end:{line:95,column:7}},{start:{line:80,column:6},end:{line:95,column:7}}],line:80},"6":{loc:{start:{line:80,column:10},end:{line:80,column:65}},type:"binary-expr",locations:[{start:{line:80,column:10},end:{line:80,column:14}},{start:{line:80,column:19},end:{line:80,column:64}}],line:80}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e84ed6aabeae8a05dd8fa6aae5a55333e803261f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1a1g64j4zd=function(){return actualCoverage;};}return actualCoverage;}cov_1a1g64j4zd();//import tea model
// importing user context
const User=(cov_1a1g64j4zd().s[0]++,require("../models/user"));cov_1a1g64j4zd().s[1]++;require('dotenv').config();var bcrypt=(cov_1a1g64j4zd().s[2]++,require('bcryptjs'));const jwt=(cov_1a1g64j4zd().s[3]++,require('jsonwebtoken'));// const auth = require("../middleware/authServer");
cov_1a1g64j4zd().s[4]++;const register=async(req,res)=>{cov_1a1g64j4zd().f[0]++;cov_1a1g64j4zd().s[5]++;// Our register logic starts here
try{// Get user input
const{first_name,last_name,email,password}=(cov_1a1g64j4zd().s[6]++,req.body);// Validate user input
cov_1a1g64j4zd().s[7]++;if(!((cov_1a1g64j4zd().b[1][0]++,email)&&(cov_1a1g64j4zd().b[1][1]++,password)&&(cov_1a1g64j4zd().b[1][2]++,first_name)&&(cov_1a1g64j4zd().b[1][3]++,last_name))){cov_1a1g64j4zd().b[0][0]++;cov_1a1g64j4zd().s[8]++;res.status(400).send("All input is required");}else{cov_1a1g64j4zd().b[0][1]++;}// check if user already exist
// Validate if user exist in our database
const oldUser=(cov_1a1g64j4zd().s[9]++,await User.findOne({email}));cov_1a1g64j4zd().s[10]++;if(oldUser){cov_1a1g64j4zd().b[2][0]++;cov_1a1g64j4zd().s[11]++;return res.status(409).send("User Already Exist. Please Login");}else{cov_1a1g64j4zd().b[2][1]++;}//Encrypt user password
//    const password = await req.body.password;
cov_1a1g64j4zd().s[12]++;encryptedPassword=await bcrypt.hash(password,10);// Create user in our database
const user=(cov_1a1g64j4zd().s[13]++,await User.create({first_name,last_name,email:email.toLowerCase(),// sanitize: convert email to lowercase
password:encryptedPassword}));// Create token
const token=(cov_1a1g64j4zd().s[14]++,jwt.sign({user_id:user._id,email},process.env.ACCESS_TOKEN_SECRET,{expiresIn:"2h"}));// save user token
cov_1a1g64j4zd().s[15]++;user.token=token;// return new user
cov_1a1g64j4zd().s[16]++;res.status(201).json(user);}catch(err){cov_1a1g64j4zd().s[17]++;console.log(err);}// Our register logic ends here
};// ...
// ...
cov_1a1g64j4zd().s[18]++;const login=async(req,res)=>{cov_1a1g64j4zd().f[1]++;cov_1a1g64j4zd().s[19]++;// Our login logic starts here
try{// Get user input
const{email,password}=(cov_1a1g64j4zd().s[20]++,req.body);// Validate user input
cov_1a1g64j4zd().s[21]++;if(!((cov_1a1g64j4zd().b[4][0]++,email)&&(cov_1a1g64j4zd().b[4][1]++,password))){cov_1a1g64j4zd().b[3][0]++;cov_1a1g64j4zd().s[22]++;res.status(400).send("All input is required");}else{cov_1a1g64j4zd().b[3][1]++;}// Validate if user exist in our database
const user=(cov_1a1g64j4zd().s[23]++,await User.findOne({email}));cov_1a1g64j4zd().s[24]++;if((cov_1a1g64j4zd().b[6][0]++,user)&&(cov_1a1g64j4zd().b[6][1]++,await bcrypt.compare(password,user.password))){cov_1a1g64j4zd().b[5][0]++;// Create token
const token=(cov_1a1g64j4zd().s[25]++,jwt.sign({user_id:user._id,email},process.env.ACCESS_TOKEN_SECRET,{expiresIn:"2h"}));// save user token
cov_1a1g64j4zd().s[26]++;user.token=token;// user
cov_1a1g64j4zd().s[27]++;res.status(200).json(user);}else{cov_1a1g64j4zd().b[5][1]++;}cov_1a1g64j4zd().s[28]++;res.status(400).send("Invalid Credentials");}catch(err){cov_1a1g64j4zd().s[29]++;console.log(err);}// Our register logic ends here
};// ...
cov_1a1g64j4zd().s[30]++;module.exports={register,login};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsiVXNlciIsInJlcXVpcmUiLCJjb25maWciLCJiY3J5cHQiLCJqd3QiLCJyZWdpc3RlciIsInJlcSIsInJlcyIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiYm9keSIsInN0YXR1cyIsInNlbmQiLCJvbGRVc2VyIiwiZmluZE9uZSIsImVuY3J5cHRlZFBhc3N3b3JkIiwiaGFzaCIsInVzZXIiLCJjcmVhdGUiLCJ0b0xvd2VyQ2FzZSIsInRva2VuIiwic2lnbiIsInVzZXJfaWQiLCJfaWQiLCJwcm9jZXNzIiwiZW52IiwiQUNDRVNTX1RPS0VOX1NFQ1JFVCIsImV4cGlyZXNJbiIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwibG9nIiwibG9naW4iLCJjb21wYXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjIxSUFlWTsyRkFmWjtBQUNBO0FBQ0EsS0FBTUEsQ0FBQUEsSUFBSSwwQkFBR0MsT0FBTyxDQUFDLGdCQUFELENBQVYsQ0FBVixDLHdCQUNBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQixHQUNBLEdBQUlDLENBQUFBLE1BQU0sMEJBQUdGLE9BQU8sQ0FBQyxVQUFELENBQVYsQ0FBVixDQUNBLEtBQU1HLENBQUFBLEdBQUcsMEJBQUNILE9BQU8sQ0FBQyxjQUFELENBQVIsQ0FBVCxDQUNBO3dCQUVBLEtBQU1JLENBQUFBLFFBQVEsQ0FBRSxNQUFPQyxHQUFQLENBQVlDLEdBQVosR0FBb0IsaURBRWhDO0FBQ0EsR0FBSSxDQUNGO0FBQ0EsS0FBTSxDQUFFQyxVQUFGLENBQWNDLFNBQWQsQ0FBeUJDLEtBQXpCLENBQWdDQyxRQUFoQywyQkFBNkNMLEdBQUcsQ0FBQ00sSUFBakQsQ0FBTixDQUVBO0FBSkUsd0JBS0YsR0FBSSxFQUFFLDRCQUFBRixLQUFLLCtCQUFJQyxRQUFKLENBQUwsOEJBQXFCSCxVQUFyQiwrQkFBbUNDLFNBQW5DLENBQUYsQ0FBSixD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Z0JDLElBQWhCLENBQXFCLHFCQUFyQixFQUNELENBQUMsTUFBT2lCLEdBQVAsQ0FBWSwwQkFDWkMsT0FBTyxDQUFDQyxHQUFSLENBQVlGLEdBQVosRUFDRCxDQUNEO0FBQ0QsQ0FuQ0gsQ0FxQ0U7eUJBQ0ZLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixDQUNiaEMsUUFEYSxDQUViNkIsS0FGYSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IHRlYSBtb2RlbFxyXG4vLyBpbXBvcnRpbmcgdXNlciBjb250ZXh0XHJcbmNvbnN0IFVzZXIgPSByZXF1aXJlKFwiLi4vbW9kZWxzL3VzZXJcIik7XHJcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xyXG52YXIgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKTtcclxuY29uc3Qgand0PXJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xyXG4vLyBjb25zdCBhdXRoID0gcmVxdWlyZShcIi4uL21pZGRsZXdhcmUvYXV0aFNlcnZlclwiKTtcclxuXHJcbmNvbnN0IHJlZ2lzdGVyPSBhc3luYyAocmVxLCByZXMpID0+IHtcclxuXHJcbiAgICAvLyBPdXIgcmVnaXN0ZXIgbG9naWMgc3RhcnRzIGhlcmVcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEdldCB1c2VyIGlucHV0XHJcbiAgICAgIGNvbnN0IHsgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCwgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xyXG4gIFxyXG4gICAgICAvLyBWYWxpZGF0ZSB1c2VyIGlucHV0XHJcbiAgICAgIGlmICghKGVtYWlsICYmIHBhc3N3b3JkICYmIGZpcnN0X25hbWUgJiYgbGFzdF9uYW1lKSkge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKFwiQWxsIGlucHV0IGlzIHJlcXVpcmVkXCIpO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIC8vIGNoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdFxyXG4gICAgICAvLyBWYWxpZGF0ZSBpZiB1c2VyIGV4aXN0IGluIG91ciBkYXRhYmFzZVxyXG4gICAgICBjb25zdCBvbGRVc2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWwgfSk7XHJcbiAgXHJcbiAgICAgIGlmIChvbGRVc2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA5KS5zZW5kKFwiVXNlciBBbHJlYWR5IEV4aXN0LiBQbGVhc2UgTG9naW5cIik7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy9FbmNyeXB0IHVzZXIgcGFzc3dvcmRcclxuICAgIC8vICAgIGNvbnN0IHBhc3N3b3JkID0gYXdhaXQgcmVxLmJvZHkucGFzc3dvcmQ7XHJcbiAgICAgIGVuY3J5cHRlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKTtcclxuICBcclxuICAgICAgLy8gQ3JlYXRlIHVzZXIgaW4gb3VyIGRhdGFiYXNlXHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XHJcbiAgICAgICAgZmlyc3RfbmFtZSxcclxuICAgICAgICBsYXN0X25hbWUsXHJcbiAgICAgICAgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCksIC8vIHNhbml0aXplOiBjb252ZXJ0IGVtYWlsIHRvIGxvd2VyY2FzZVxyXG4gICAgICAgIHBhc3N3b3JkOiBlbmNyeXB0ZWRQYXNzd29yZCxcclxuICAgICAgfSk7XHJcbiAgXHJcbiAgICAgIC8vIENyZWF0ZSB0b2tlblxyXG4gICAgICBjb25zdCB0b2tlbiA9IGp3dC5zaWduKFxyXG4gICAgICAgIHsgdXNlcl9pZDogdXNlci5faWQsIGVtYWlsIH0sXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuQUNDRVNTX1RPS0VOX1NFQ1JFVCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBleHBpcmVzSW46IFwiMmhcIixcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgIC8vIHNhdmUgdXNlciB0b2tlblxyXG4gICAgICB1c2VyLnRva2VuID0gdG9rZW47XHJcbiAgXHJcbiAgICAgIC8vIHJldHVybiBuZXcgdXNlclxyXG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih1c2VyKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfVxyXG4gICAgLy8gT3VyIHJlZ2lzdGVyIGxvZ2ljIGVuZHMgaGVyZVxyXG4gIH07XHJcbiAgXHJcbiAgLy8gLi4uXHJcblxyXG5cclxuXHJcbiAgLy8gLi4uXHJcblxyXG5jb25zdCBsb2dpbj0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcblxyXG4gICAgLy8gT3VyIGxvZ2luIGxvZ2ljIHN0YXJ0cyBoZXJlXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBHZXQgdXNlciBpbnB1dFxyXG4gICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XHJcbiAgXHJcbiAgICAgIC8vIFZhbGlkYXRlIHVzZXIgaW5wdXRcclxuICAgICAgaWYgKCEoZW1haWwgJiYgcGFzc3dvcmQpKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLnNlbmQoXCJBbGwgaW5wdXQgaXMgcmVxdWlyZWRcIik7XHJcbiAgICAgIH1cclxuICAgICAgLy8gVmFsaWRhdGUgaWYgdXNlciBleGlzdCBpbiBvdXIgZGF0YWJhc2VcclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9uZSh7IGVtYWlsIH0pO1xyXG4gIFxyXG4gICAgICBpZiAodXNlciAmJiAoYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpKSkge1xyXG4gICAgICAgIC8vIENyZWF0ZSB0b2tlblxyXG4gICAgICAgIGNvbnN0IHRva2VuID0gand0LnNpZ24oXHJcbiAgICAgICAgICB7IHVzZXJfaWQ6IHVzZXIuX2lkLCBlbWFpbCB9LFxyXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuQUNDRVNTX1RPS0VOX1NFQ1JFVCxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZXhwaXJlc0luOiBcIjJoXCIsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICBcclxuICAgICAgICAvLyBzYXZlIHVzZXIgdG9rZW5cclxuICAgICAgICB1c2VyLnRva2VuID0gdG9rZW47XHJcbiAgXHJcbiAgICAgICAgLy8gdXNlclxyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVzZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKFwiSW52YWxpZCBDcmVkZW50aWFsc1wiKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfVxyXG4gICAgLy8gT3VyIHJlZ2lzdGVyIGxvZ2ljIGVuZHMgaGVyZVxyXG4gIH07XHJcbiAgXHJcbiAgLy8gLi4uXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVnaXN0ZXIsXHJcbiAgICBsb2dpblxyXG59XHJcbiJdfQ==